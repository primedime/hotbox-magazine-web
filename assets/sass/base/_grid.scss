/*--------------------------------------------------------------
# CSS Grids and Containers
--------------------------------------------------------------*/
/*
  - Containers can be used anywhere for holding main content.
  - They have padding on both sides so on mobile the content wont hit the edges.
  - They have a max-width and are centered. They also have a width of 100% to work nicely inside flex items and grids.
  - It's best to keep containers surrounding content on their own div. Dont combine with grids and layouts in one div.
 */
/*------- Containers --------*/
.container {
  width: 100%;
  max-width: var(--container);
  margin: auto;
  padding: 0 var(--container-padding);
}

.container-fluid {
  width: 100%;
  margin: auto;
  padding: 0 var(--container-padding);
}


/*------- Special Container Content For articles --------*/
/*
- Container-Content is meant to hold an article's content after the header.
- It's for actual words and makes sure the line is not too long
- It cleverly allows for items inside to go full width and "break out" with alignwide and alignfull
- The container itself has no max-width, instead its items within. So make sure you dont use grid with container-content on same div.
- Any items inside with full-width or .alignfull will NOT have a max-width and will fill page
- Dont surround container-content with a container or full items wont be full width!
*/
.container-content {
  padding: 0 var(--container-padding);

  > *:not( .alignwide ):not( .alignfull ):not(.ful-width) {
    max-width: var(--container-content) !important; //needs to override the figures or any other elements with inline widths
    margin-right: auto;
    margin-left: auto;
  }

  > .full-width, > .alignfull {
    width: auto; //override gutenberg, otherwise negative margins below wont work
    margin-left: calc(-1 * var(--container-padding)); //negative margins to counteract the containers padding
    margin-right: calc(-1 * var(--container-padding));
  }

}


.no-gutters{
  padding-left: 0;
  padding-right: 0;
}

/*--------------------------------------------------------------
# WP Align Wide has a max width.
--------------------------------------------------------------*/

.alignwide {
  width: 100%;
  max-width: var(--container);
  margin-left: auto;
  margin-right: auto;
}

/*--------------------------------------------------------------
# CARD GRIDS
--------------------------------------------------------------*/

/*------- Grid Layouts --------*/
/*
- Simple Responsive grid of equal sized items
- Create your own responsive grid!
- Add @include grid($min-size-of-items);
- The default min size is 350
- Items grow if there is room to grow, or fall to next row fi there isnt.
 */
.card-grid {
  @include card-grid(); //items stretch to fill space always if there arent enough cards
}

.card-grid-fill {
  @include card-grid(350px, 1fr, $gap, auto-fill); //only stretches items if theres no room for another item on row
}

.flex-card-grid {
  @include flex-card-grid(); //almost the same except cards on lowest row will not be same size if there isnt an even amount
}

.large-gap{
  grid-gap: calc(var(--gap) * 2);
}

/*--------------------------------------------------------------
# 12 Column CSS Grids
--------------------------------------------------------------*/

.grid {
  display: grid;
  grid-template-columns: repeat(12, minmax(1px, 1fr));
  grid-gap: var(--gap);

  //span on individuals overrides span-all
  @for $i from 1 through 12 {
    div & .span-#{$i}, &.span-all-#{$i} > * {
      grid-column: span #{$i};
    }
  }
}

//fix the gap when it gets too small
//even if everything collpases, the browser expects 12 gaps of 30 pixels of room to exist. and adding container gutters brings us to 420. below this the grid won fit unless we lower the gap.
@media(max-width: 420px){
  .grid{
    grid-gap: 30px 20px;
  }
}

div .no-gutters{
  grid-gap: 0;
}

.span-full {
  grid-column: 1 / -1;
  flex-basis: 100%;
}

div .grid {
  //large and below size on items
  @media(max-width: $media-large) {
    @for $i from 1 through 12 {
      div & > .large-span-#{$i}, &.large-span-all-#{$i} > * {
        grid-column: span #{$i};
      }
    }
  }

  //medium and below size on items
  @media(max-width: $media-medium) {
    @for $i from 1 through 12 {
      div & > .medium-span-#{$i}, &.medium-span-all-#{$i} > * {
        grid-column: span #{$i};
      }
    }
  }

  //small and below size on items. a bit stronger specificity
  @media(max-width: $media-small) {

    //only small-span can override this. has extra specificity
    @if ($collapse-on-small == true) {
      div.site & > * {
        grid-column: 1 / -1;
      }
    }

    @for $i from 1 through 12 {
      div & > .small-span-#{$i}, div &.small-span-all-#{$i} > * {
        grid-column: span #{$i};
      }
    }

  }

}

/*--------------------------------------------------------------
# Flexbox grids. 99% same as css grid
--------------------------------------------------------------*/

.flex, .flex-grid {
  display: flex;

  //gutters via margins. the flex-basis makes sure it can be sized right
  & > * {
    margin-right: var(--gutters);
    margin-left: var(--gutters);
    flex: 1;
  }

  &.large-gap > *{
    margin-right: calc(var(--gutters) * 2);
    margin-left: calc(var(--gutters) * 2);
  }

  @for $i from 1 through 12 {
    div & .span-#{$i}, &.span-all-#{$i} > * {
      $width: 100% / (12/$i);
      flex-basis: calc(#{$width} - var(--gap));
    }

    div & > .span-#{$i}{
      flex-grow: 0;
      flex-shrink: 0;
    }
  }

}

.flex.no-gutters, .flex-grid.no-gutters {
  & > * {
    margin: 0;
  }
}

//many rows has margin bottom and wraps
.flex-grid {
  flex-wrap: wrap;
  & > * {
    margin-bottom: var(--gap);
  }
}

//pull out to match containers edge
.container .flex, .container-fluid .flex,
.container .flex-grid, .container-fluid .flex-grid,
.site-content .content-area .container-content .flex, .site-content .content-area .container-content .flex-grid {
  margin-left: calc(-1 * var(--gutters));
  margin-right: calc(-1 * var(--gutters));

  &.no-gutters {
    margin-left: 0;
    margin-right: 0;
  }

  &.large-gap{
    --large-gap: calc(var(--gutters) * 2);
    margin-left: calc(-1 * var(--large-gap));
    margin-right: calc(-1 * var(--large-gap));
  }

}




div .flex-grid, div .flex {

  //large and below size on items
  @media(max-width: $media-large) {
    @for $i from 1 through 12 {
      div & > .large-span-#{$i}, &.large-span-all-#{$i} > * {
        $width: 100% / (12/$i);
        flex-basis: calc(#{$width} - var(--gap));
      }
      div & > .large-span-#{$i}{
        flex-grow: 0;
        flex-shrink: 0;
      }
    }
  }

  //medium and below size on items
  @media(max-width: $media-medium) {
    @for $i from 1 through 12 {
      div & > .medium-span-#{$i}, &.medium-span-all-#{$i} > * {
        $width: 100% / (12/$i);
        flex-basis: calc(#{$width} - var(--gap));
      }

      div & > .medium-span-#{$i}{
        flex-grow: 0;
        flex-shrink: 0;
      }
    }
  }

  //small and below size on items
  @media(max-width: $media-small) {

    //no need to add class if set to collapse on small is always true. overrides any spans
    @if ($collapse-on-small == true) {
      flex-wrap: wrap;
      div.site & > * {
        flex-basis: calc(100% - var(--gap));
      }
    }

    @for $i from 1 through 12 {
      div & > .small-span-#{$i}, &.small-span-all-#{$i} > * {
        $width: 100% / (12/$i);
        flex-basis: calc(#{$width} - var(--gap));
      }

      div & > .small-span-#{$i}{
        flex-grow: 0;
        flex-shrink: 0;
      }
    }
  }

}

/*--------------------------------------------------------------
# Grid Helpers
--------------------------------------------------------------*/
.align-center {
  align-items: center;
}

.justify-center {
  justify-content: center;
}

.flex-wrap {
  flex-wrap: wrap;
}

.flex-column {
  flex-direction: column;
}


/*--------------------------------------------------------------
# Layouts
--------------------------------------------------------------*/

/*------- Layout that centers vertically and horizontally --------*/
.layout-center-content {
  display: flex;
  align-items: center;
  justify-content: center;
}


/*------- Grid of cards. requires grid class --------*/
.layout-cards-7{
  //small cards
  > *{
    grid-column: span 4;
    .hide-on-small-card{
      display: none;
    }
  }
  //large cards
  > *:nth-child(7n - 3), > *:nth-child(7n - 6){
    grid-column: span 8;
    .hide-on-small-card{
      display: block;
    }
  }
}

//ie11 flex the cards
@media all and (-ms-high-contrast: none) {
  .layout-cards-7{
    //small cards
    > *{
      width: calc(33.333% -  var(--gap));
      .hide-on-small-card{
        display: none;
      }
    }
    > *:nth-child(7n - 3), > *:nth-child(7n - 6){
      width: calc(66.66666% - var(--gap));
      .hide-on-small-card{
        display: block;
      }
    }
  }
}




  